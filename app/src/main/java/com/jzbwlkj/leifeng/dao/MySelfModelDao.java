package com.jzbwlkj.leifeng.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jzbwlkj.leifeng.ui.bean.MySelfModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_SELF_MODEL".
*/
public class MySelfModelDao extends AbstractDao<MySelfModel, Long> {

    public static final String TABLENAME = "MY_SELF_MODEL";

    /**
     * Properties of entity MySelfModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Doctor_id = new Property(0, Long.class, "doctor_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Num = new Property(3, int.class, "num", false, "NUM");
        public final static Property Pid = new Property(4, String.class, "pid", false, "PID");
        public final static Property Selected = new Property(5, boolean.class, "selected", false, "SELECTED");
    }


    public MySelfModelDao(DaoConfig config) {
        super(config);
    }
    
    public MySelfModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_SELF_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: doctor_id
                "\"NAME\" TEXT," + // 1: name
                "\"ID\" TEXT," + // 2: id
                "\"NUM\" INTEGER NOT NULL ," + // 3: num
                "\"PID\" TEXT," + // 4: pid
                "\"SELECTED\" INTEGER NOT NULL );"); // 5: selected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_SELF_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MySelfModel entity) {
        stmt.clearBindings();
 
        Long doctor_id = entity.getDoctor_id();
        if (doctor_id != null) {
            stmt.bindLong(1, doctor_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
        stmt.bindLong(4, entity.getNum());
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(5, pid);
        }
        stmt.bindLong(6, entity.getSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MySelfModel entity) {
        stmt.clearBindings();
 
        Long doctor_id = entity.getDoctor_id();
        if (doctor_id != null) {
            stmt.bindLong(1, doctor_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
        stmt.bindLong(4, entity.getNum());
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(5, pid);
        }
        stmt.bindLong(6, entity.getSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MySelfModel readEntity(Cursor cursor, int offset) {
        MySelfModel entity = new MySelfModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // doctor_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.getInt(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pid
            cursor.getShort(offset + 5) != 0 // selected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MySelfModel entity, int offset) {
        entity.setDoctor_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.getInt(offset + 3));
        entity.setPid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSelected(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MySelfModel entity, long rowId) {
        entity.setDoctor_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MySelfModel entity) {
        if(entity != null) {
            return entity.getDoctor_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MySelfModel entity) {
        return entity.getDoctor_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
